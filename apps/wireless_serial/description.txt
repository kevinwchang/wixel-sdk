Wireless Serial App
by Pololu
http://www.pololu.com/docs/0J46

== Overview ==

This app allows you to connect two Wixels together to make a wireless, bidirectional, lossless serial link.  It uses an RF bit rate of 350 kbps, is capable of carrying up to 10 KB of payload data per second, and can reach a range of approximately 40 feet (under typical conditions indoors).  You can also use it to turn one Wixel in to a USB-to-TTL serial adapter.

This app can run on multiple pairs of Wixels as long as each pair operates on a different radio channel (the channels should be separated by 2 to avoid interference).

This app is designed for pairs of Wixels; it will not work properly if three or more Wixels are broadcasting on the same radio channel.

== Default Pinout ==

PIN   FUNCTION
P1_0  nDTR          general-purpose output pin
P1_1  nRTS          general-purpose output pin
P1_2  nDSR          general-purpose input pin
P1_3  nCD           general-purpose input pin
P1_5  PA_PD         radio transmit debug signal
P1_6  TX            transmits serial data (0-3.3 V)
P1_7  RX            receives serial data (0-3.3 V, not 5 V tolerant)
P0_0  Arduino DTR   output reserved for future use


== Description ==

This device appears to the USB host as a Virtual COM Port (with USB product ID 0x2200).  If you are using Windows, you should see an entry labeled "Wixel" in your Device Manager in the "Ports (COM & LPT)" category while the app is running.

There are three basic serial modes that can be selected:

1) USB-to-Radio: Serial bytes from the USB virtual COM port get sent to the radio and vice versa.
2) UART-to-Radio: Serial bytes from the UART's RX line get sent to the radio and bytes from the radio get sent to the UART's TX line.
3) USB-to-UART: Just like a normal USB-to-TTL serial adapter, bytes from the virtual COM port get sent on the UART's TX line and bytes from the UART's RX line get sent to the virtual COM port.

You can select which serial mode you want to use by setting the serial_mode parameter to the appropriate number (from the list above) or you can leave the serial mode at 0 (which is the default).  If the serial_mode is 0, then the Wixel will automatically choose a serial mode based on how it is being powered as described in the table below, and it will switch between the different serial modes on the fly.

Auto-Detect Serial Mode (serial_mode = 0):
  POWER SOURCE    SERIAL MODE
  USB only        USB-to-Radio
  VIN only        UART-to-Radio
  USB and VIN     USB-to-UART

The RX pin has an internal 20 kilohm pull-up resistor.

The PA_PD pin (P1_5) is a debugging output that goes low while the Wixel is transmitting a packet on the radio.


== Indicator LEDs ==

When the Wixel connects to USB, the green LED starts blinking slowly. The blinking continues until the Wixel receives a particular message from the computer indicating that the drivers are installed correctly.  After the Wixel gets this message, the green LED turns solidly on. The green LED also turns off during USB Suspend Mode, which happens when the computer goes to sleep or shuts down the USB port for any other reason.  The green LED also flickers when there is data transferred over USB.

The yellow LED is on when VIN power is detected.

The red LED should not turn on; if it does then this indicates a bug in the application.


== Control Signals ==

In addition to relaying bidirectional serial data, this app also relays the values of four control signals: DTR, RTS, DSR, and CD.  The names of these control signals come from the RS-232 protocol, but in this app they do not actually have the same role as they have in that protocol: they are general purpose digital control signals that can carry any kind of data that you want them to, as long as that data changes slowly (on the order of 5 Hz or slower) and is limited to two bits in each direction.

In USB-to-Radio mode, the DTR and RTS signals from USB are transmitted wirelessly to the other Wixel, while the control signals wirelessly received from the other Wixel are relayed to USB as DSR and CD.

In UART-to-Radio mode, the DSR and CD signals from the digital input pins are transmitted wirelessly to the other Wixel, while the control signals wirelessly received from the other Wixel are relayed to the DTR and RTS output pins.

In USB-to-UART mode, the DTR and RTS signals from USB are relayed to the corresponding output pins, while the values of the DSR and CD input pins are relayed to USB.

If two Wixels are communicating wirelessly with each other and both are in UART-to-Radio mode or both are in USB-to-Radio mode, then the correspondence between the control lines is as follows: DSR on one Wixel corresponds to DTR on the other Wixel, while RTS on one Wixel corresponds to CD on the other Wixel.

The default configuration of this app (as shown in the table above) gives the Wixel two inverted output pins (nDTR and nRTS), and two inverted input pins (nDSR and nCD).  These pins are *inverted*, which means that a logical value of 0 corresponds to high voltage (usually 3.3 V), while a logical value of 1 corresponds to 0 V (GND).

By changing the configuration parameters (see below), you can disable these signals, reassign them to different I/O lines, or add non-inverted inputs and outputs.

Any pin configured as an input will have an internal 20 kilohm pull-up resistor.

Note: You do not have to connect anything to the control signal pins in order to send and receive serial data.  These pins are optional.


== General Parameters ==

* serial_mode: Selects the serial mode (1-3, see list above) or auto-detect serial mode (0).  The default is 0.
* baud_rate: The baud rate to use for the UART, in bits per second.  The default is 9600.  We recommend not exceeding 115200.
* radio_channel: The channel number is from 0 to 255 and determines which frequency to broadcast on.  The default is 128.  Wixels must be on the same channel to communicate with each other.  To avoid interference, Wixels that aren't supposed to talk to each other should be at least 2 channels away from each other.  For example, you could have one pair of Wixels on channel 128 and another pair on 130.


== Pin Assignment Parameters ==

The following parameters can be used to reassign the control signals to different pins on the Wixel.  The value of each parameter must be the number of an unused pin on the Wixel.  The number can be computed by multiplying the first digit in the pin name by 10 and adding it to the second digit in the pin name.  For example, if you wanted to assign the nDSR pin to P1_2, you would set nDSR_pin to 12.  To disable a signal (assign it to no pin), set the corresponding parameter to -1.

* *nDTR_pin:* The pin assignment for the inverted nDTR output.  The default is 10 (P1_0).
* *nRTS_pin:* The pin assignment for the inverted nRTS output.  The default is 11 (P1_1).
* *nDSR_pin:* The pin assignment for the inverted nDSR input.  The default is 12 (P1_2).
* *nCD_pin:* The pin assignment for the inverted nCDinput.  The default is 13 (P1_3).
* *DTR_pin:* The pin assignment for the non-inverted DTR output.  The default is -1 (disabled).
* *RTS_pin:* The pin assignment for the non-inverted RTS output.  The default is -1 (disabled).
* *DSR_pin:* The pin assignment for the non-inverted DSR input.  The default is -1 (disabled).
* *CD_pin:* The pin assignment for the non-inverted CD input.  The default is -1 (disabled).
* *arduino_DTR_pin:* The pin assignment for an output that is reserved for future use.  The default is 0 (P0_0).

You should not simultaneously enable the non-inverted and inverted input for the same signal.  Specifically, either nCD_pin or CD_pin should be -1 and either nDSR_pin or DSR_pin should be -1.


== Example Uses ==

# This application can be used to make a wireless serial link between two microcontrollers, with no USB involved (except for initially configuring the Wixels).  To do this, use the UART-to-Radio mode on both Wixels.
# This application can be used to make a wireless serial link between a computer and a microcontroller.  Use USB-to-Radio mode on the Wixel that is connected to the computer and use UART-to-Radio mode on the Wixel that is connected to the microcontroller.  If you are powering both Wixels in the usual way, you should be able to use auto-detect serial mode (serial_mode = 0).
# If you are doing option 2 above and using the the auto-detect serial mode (serial_mode = 0), then you have the option to (at any time) plug a USB cable directly in to the Wixel that is connected to your microcontroller to establish a more direct (wired) serial connection with the microcontroller.  (You would, of course, have to tell your computer to switch to the other COM port when you do this.)


== Caveats ==

Data will be lost if the Wixel receives bytes on the RX line faster than the radio can convey them to the other Wixel.  If you have trouble, try reducing the amount of data sent to the RX line or adding delays to your microcontroller's code.


== Versions ==

* Wireless Serial App v1.2, released 2011-04-04: Added support for control signals.  As a result, the radio protocol used is NOT compatible with earlier versions.  Also fixed a glitch on the TX line that occurred on upon power-up or reset.  Added blinking behavior to the green LED to indicate USB data transfer.
* Wireless Serial App v1.1, released 2011-03-23: Improved the radio protocol to fix a problem in v1.0 where if one Wixel resets but the other Wixel does not, then (depending on the state of the other Wixel) there is a 50% probability that the next radio packet sent in either direction will be ignored by the receiver.
* Wireless Serial App v1.0, released 2011-03-22: Initial release.
